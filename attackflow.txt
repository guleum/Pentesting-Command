<디렉토리 퍼징>
# python dirsearch -u www.example.com --include-status 200,204,403 -> 해당 응답코드만 출력
# python dirsearch -u www.example.com --exclude-status 403,401,400 -> 해당 응답코드 제외

<버그헌팅>
1.subfinder + httpx 를 사용하여 접근 가능한 하위 도메인 열거(상태응답코드 확인)
# subfinder -d example.com -silent | httpx -title -content-length -status-code -silent

py3# python sublist3r.py -d example.com (하위도메인 열거)
py3# python sublist3r.py -d example.com -p 80,443 (80,443 포트가 열린 하위도메인표시)
py3# python sublist3r.py -v -d example.com (과정보기)

2.subdomain Takerover 취약점
# subover -l domain.txt -v (domain.txt 와 provider.json파일이 동일한 위치에 있어야됨)
# subzy -targets domain.txt
# subzy -target dev.example.com

2-1.Cors 취약점
py3# python cors_scan.py -u www.example.com
py3# python cors_scan.py -i domain.txt -t 100
py3# python cors_scan.py -i domain.txt -t 100 -o result.txt
py3# python corsy.py -i domain.txt 또는 cat domain.txt | pyhton corsy.py
py3# python corsy.py -u www.example.com

3.waybackurls/gau + httpx 사용해서 접근가능한 매개변수 열거(상태응답코드 확인)
# gau -b jpg,png,gif www.example.com > test.txt
# cat domain.txt | gau > gau.txt 
# waybackurls www.example.com > gau.txt
# cat domain.txt | waybackurls | httpx --status-code

3-1.qsreplace로 매개변수 값들 치환
# cat gau.txt | qsreplace -a (중복 URL제거)
# cat gau.txt | qsreplace new (매개변수의 값이 new로 바뀜)
# cat gau.txt | qsreplace -a new (매개변수 값에 new룰이어서 추가)

3-2.오픈리다이렉트 검증
py3# python oralyzer.py -u www.example.com/redir.php?url=site.com
py3# python oralyzer.py -l url.txt

3-3.Hidden Parameter 찾기
py3# arjun -u http://www.example.com/id?=1 -t 16 (기본은 스레드 2)
py3# arjun -u http://www.example.com/id?=1 --stable (까다로운 사이트의경우 사용)
py3# arjun -u http://www.example.com/id?=1 --get (GET 매개변수 검색)
py3# arjun -u http://www.example.com/id?=1 --post (POST 매개변수 검색)
py3# arjun -u http://www.example.com/id?=1 --josn (json 매개변수 검색)
py3# arjun -u http://www.example.com/id?=1 --urls urls.txt (여러개 한번에)
py3# arjun -u http://www.example.com/id?=1 -o results.json (json형식으로 저장)

3-4.접근 가능한곳만 txt로 추린후 kxss를 사용해서 취약한 매개변수 확인
# cat method.txt | kxss > kxss.txt

3-5.Http Request Smuggling 자동화
py3# python smuggler.py -u www.example.com/id=1
py3# cat urls.txt | python smuggler.py

3-6.퍼징한 메소드 파일들을 기준으로 nuclei 자동화
# cd /nuclei/nuclei-templates/
# nuclei -l gau.txt -t /vulnerabilities -silent -o result.txt (풀스캔결과를 텍스트파일로 출력)
# nuclei -l subdomain.txt -t takeovers -o result.txt (하윝도메인 탈취 테스트)
# nuclei -u www.exmaple.com/id=1 -t /vulnerabilities -silent (단일 도메인)

4.dalfox/xspear 를 사용해서 공격
(dalfox 커맨드)
# cat kxss.txt | sed 's/=.*/=/' | sed 's/URL: //' | dalfox pipe
(XSpear 커맨드)
# XSpear -u http://www.example.com/list.jsp?table_name= -a -v 1
# XSpear -u http://www.example.com/list.jsp?table_name= -p table_name

<단일도메인>
1.gau/waybakurls 를 통해 매개변수 도출
(waybackurls 커맨드)
# waybackurls www.example.com > test.txt
(gau 커맨드)
# gau -b jpg,png,gif www.example.com > test.txt 

2.kxss를 사용해서 취약한 매개변수 확인
# cat method.txt | kxss > kxss.txt

3.dalfox/xspear 를 사용해서 공격
(dalfox 커맨드)
# cat kxss.txt | sed 's/=.*/=/' | sed 's/URL: //' | dalfox pipe
(XSpear 커맨드)
# XSpear -u http://www.example.com/list.jsp?table_name= -a -v 1
# XSpear -u http://www.example.com/list.jsp?table_name= -p table_name